[tool.ruff]
# Line length and target version are top-level
line-length = 88
target-version = "py38"

[tool.ruff.lint]
# Enable recommended rules + specific ones useful for data science projects
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "PL",  # pylint
    "RUF", # ruff-specific rules
    "W",   # pycodestyle warnings
]

# Ignore specific rules
ignore = [
    "E501",  # line too long - let's handle line length more flexibly for data science code
    "N803",  # argument name should be lowercase - common in ML to use X, y
    "N806",  # variable name should be lowercase - common in ML to use X_train, y_test
]

# Allow autofix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]

# Exclude a variety of commonly ignored directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "build",
    "dist",
    "mlruns",
    ".pytest_cache",
    ".archive",
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore unused imports in __init__.py files
"__init__.py" = ["F401"]
# Ignore specific rules in test files
"tests/*" = ["PLR2004"]  # Magic numbers are more acceptable in tests
# ML-specific ignores
"src/v2/predictor.py" = ["PLR0913", "PLR0915"]  # ML models often need many parameters
"src/v2/train.py" = ["PLR0913", "PLR0912", "PLR0915"]  # Training code is inherently complex
"src/v2/training_summary.py" = ["PLR0913", "PLR0915"]  # Analysis code can be complex
"src/v2/console_app.py" = ["PLR0912"]  # Console app needs many branches for user interaction
"src/v2/features.py" = ["PLR2004"]  # Ignoring specific magic numbers in features.py

[tool.ruff.lint.mccabe]
# Maximum cyclomatic complexity allowed
max-complexity = 15  # Increased for ML code which can be more complex

[tool.ruff.lint.isort]
known-first-party = ["src"] 